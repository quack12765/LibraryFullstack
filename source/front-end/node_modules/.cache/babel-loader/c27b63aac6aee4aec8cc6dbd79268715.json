{"remainingRequest":"/home/user_2200475/library_PROJ/source/front-end/node_modules/babel-loader/lib/index.js!/home/user_2200475/library_PROJ/source/front-end/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/user_2200475/library_PROJ/source/front-end/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/user_2200475/library_PROJ/source/front-end/node_modules/@jiaminghi/data-view/lib/components/decoration5/src/main.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/user_2200475/library_PROJ/source/front-end/node_modules/@jiaminghi/data-view/lib/components/decoration5/src/main.vue","mtime":499162500000},{"path":"/home/user_2200475/library_PROJ/source/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user_2200475/library_PROJ/source/front-end/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/user_2200475/library_PROJ/source/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user_2200475/library_PROJ/source/front-end/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IGF1dG9SZXNpemUgZnJvbSAnLi4vLi4vLi4vbWl4aW4vYXV0b1Jlc2l6ZSc7CmltcG9ydCB7IGdldFBvbHlsaW5lTGVuZ3RoIH0gZnJvbSAnQGppYW1pbmdoaS9jaGFydHMvbGliL3V0aWwnOwppbXBvcnQgeyBkZWVwTWVyZ2UgfSBmcm9tICdAamlhbWluZ2hpL2NoYXJ0cy9saWIvdXRpbC9pbmRleCc7CmltcG9ydCB7IGRlZXBDbG9uZSB9IGZyb20gJ0BqaWFtaW5naGkvYy1yZW5kZXIvbGliL3BsdWdpbi91dGlsJzsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdEdkRlY29yYXRpb241JywKICBtaXhpbnM6IFthdXRvUmVzaXplXSwKICBwcm9wczogewogICAgY29sb3I6IHsKICAgICAgdHlwZTogQXJyYXksCiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkgewogICAgICAgIHJldHVybiBbXTsKICAgICAgfQogICAgfSwKICAgIGR1cjogewogICAgICB0eXBlOiBOdW1iZXIsCiAgICAgIGRlZmF1bHQ6IDEuMgogICAgfQogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHJlZjogJ2RlY29yYXRpb24tNScsCiAgICAgIGxpbmUxUG9pbnRzOiAnJywKICAgICAgbGluZTJQb2ludHM6ICcnLAogICAgICBsaW5lMUxlbmd0aDogMCwKICAgICAgbGluZTJMZW5ndGg6IDAsCiAgICAgIGRlZmF1bHRDb2xvcjogWycjM2Y5NmE1JywgJyMzZjk2YTUnXSwKICAgICAgbWVyZ2VkQ29sb3I6IFtdCiAgICB9OwogIH0sCiAgd2F0Y2g6IHsKICAgIGNvbG9yOiBmdW5jdGlvbiBjb2xvcigpIHsKICAgICAgdmFyIG1lcmdlQ29sb3IgPSB0aGlzLm1lcmdlQ29sb3I7CiAgICAgIG1lcmdlQ29sb3IoKTsKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIGFmdGVyQXV0b1Jlc2l6ZU1peGluSW5pdDogZnVuY3Rpb24gYWZ0ZXJBdXRvUmVzaXplTWl4aW5Jbml0KCkgewogICAgICB2YXIgY2FsY1NWR0RhdGEgPSB0aGlzLmNhbGNTVkdEYXRhOwogICAgICBjYWxjU1ZHRGF0YSgpOwogICAgfSwKICAgIGNhbGNTVkdEYXRhOiBmdW5jdGlvbiBjYWxjU1ZHRGF0YSgpIHsKICAgICAgdmFyIHdpZHRoID0gdGhpcy53aWR0aCwKICAgICAgICAgIGhlaWdodCA9IHRoaXMuaGVpZ2h0OwogICAgICB2YXIgbGluZTFQb2ludHMgPSBbWzAsIGhlaWdodCAqIDAuMl0sIFt3aWR0aCAqIDAuMTgsIGhlaWdodCAqIDAuMl0sIFt3aWR0aCAqIDAuMiwgaGVpZ2h0ICogMC40XSwgW3dpZHRoICogMC4yNSwgaGVpZ2h0ICogMC40XSwgW3dpZHRoICogMC4yNywgaGVpZ2h0ICogMC42XSwgW3dpZHRoICogMC43MiwgaGVpZ2h0ICogMC42XSwgW3dpZHRoICogMC43NSwgaGVpZ2h0ICogMC40XSwgW3dpZHRoICogMC44LCBoZWlnaHQgKiAwLjRdLCBbd2lkdGggKiAwLjgyLCBoZWlnaHQgKiAwLjJdLCBbd2lkdGgsIGhlaWdodCAqIDAuMl1dOwogICAgICB2YXIgbGluZTJQb2ludHMgPSBbW3dpZHRoICogMC4zLCBoZWlnaHQgKiAwLjhdLCBbd2lkdGggKiAwLjcsIGhlaWdodCAqIDAuOF1dOwogICAgICB2YXIgbGluZTFMZW5ndGggPSBnZXRQb2x5bGluZUxlbmd0aChsaW5lMVBvaW50cyk7CiAgICAgIHZhciBsaW5lMkxlbmd0aCA9IGdldFBvbHlsaW5lTGVuZ3RoKGxpbmUyUG9pbnRzKTsKICAgICAgbGluZTFQb2ludHMgPSBsaW5lMVBvaW50cy5tYXAoZnVuY3Rpb24gKHBvaW50KSB7CiAgICAgICAgcmV0dXJuIHBvaW50LmpvaW4oJywnKTsKICAgICAgfSkuam9pbignICcpOwogICAgICBsaW5lMlBvaW50cyA9IGxpbmUyUG9pbnRzLm1hcChmdW5jdGlvbiAocG9pbnQpIHsKICAgICAgICByZXR1cm4gcG9pbnQuam9pbignLCcpOwogICAgICB9KS5qb2luKCcgJyk7CiAgICAgIHRoaXMubGluZTFQb2ludHMgPSBsaW5lMVBvaW50czsKICAgICAgdGhpcy5saW5lMlBvaW50cyA9IGxpbmUyUG9pbnRzOwogICAgICB0aGlzLmxpbmUxTGVuZ3RoID0gbGluZTFMZW5ndGg7CiAgICAgIHRoaXMubGluZTJMZW5ndGggPSBsaW5lMkxlbmd0aDsKICAgIH0sCiAgICBvblJlc2l6ZTogZnVuY3Rpb24gb25SZXNpemUoKSB7CiAgICAgIHZhciBjYWxjU1ZHRGF0YSA9IHRoaXMuY2FsY1NWR0RhdGE7CiAgICAgIGNhbGNTVkdEYXRhKCk7CiAgICB9LAogICAgbWVyZ2VDb2xvcjogZnVuY3Rpb24gbWVyZ2VDb2xvcigpIHsKICAgICAgdmFyIGNvbG9yID0gdGhpcy5jb2xvciwKICAgICAgICAgIGRlZmF1bHRDb2xvciA9IHRoaXMuZGVmYXVsdENvbG9yOwogICAgICB0aGlzLm1lcmdlZENvbG9yID0gZGVlcE1lcmdlKGRlZXBDbG9uZShkZWZhdWx0Q29sb3IsIHRydWUpLCBjb2xvciB8fCBbXSk7CiAgICB9CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdmFyIG1lcmdlQ29sb3IgPSB0aGlzLm1lcmdlQ29sb3I7CiAgICBtZXJnZUNvbG9yKCk7CiAgfQp9Ow=="},{"version":3,"sources":["main.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"dv-decoration-5\" :ref=\"ref\">\n    <svg :width=\"width\" :height=\"height\">\n      <polyline\n        fill=\"transparent\"\n        :stroke=\"mergedColor[0]\"\n        stroke-width=\"3\"\n        :points=\"line1Points\"\n      >\n        <animate\n          attributeName=\"stroke-dasharray\"\n          attributeType=\"XML\"\n          :from=\"`0, ${line1Length / 2}, 0, ${line1Length / 2}`\"\n          :to=\"`0, 0, ${line1Length}, 0`\"\n          :dur=\"`${dur}s`\"\n          begin=\"0s\"\n          calcMode=\"spline\"\n          keyTimes=\"0;1\"\n          keySplines=\"0.4,1,0.49,0.98\"\n          repeatCount=\"indefinite\"\n        />\n      </polyline>\n      <polyline\n        fill=\"transparent\"\n        :stroke=\"mergedColor[1]\"\n        stroke-width=\"2\"\n        :points=\"line2Points\"\n      >\n        <animate\n          attributeName=\"stroke-dasharray\"\n          attributeType=\"XML\"\n          :from=\"`0, ${line2Length / 2}, 0, ${line2Length / 2}`\"\n          :to=\"`0, 0, ${line2Length}, 0`\"\n          :dur=\"`${dur}s`\"\n          begin=\"0s\"\n          calcMode=\"spline\"\n          keyTimes=\"0;1\"\n          keySplines=\".4,1,.49,.98\"\n          repeatCount=\"indefinite\"\n        />\n      </polyline>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\n\nimport { getPolylineLength } from '@jiaminghi/charts/lib/util'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvDecoration5',\n  mixins: [autoResize],\n  props: {\n    color: {\n      type: Array,\n      default: () => ([])\n    },\n    dur: {\n      type: Number,\n      default: 1.2\n    }\n  },\n  data () {\n    return {\n      ref: 'decoration-5',\n\n      line1Points: '',\n      line2Points: '',\n\n      line1Length: 0,\n      line2Length: 0,\n\n      defaultColor: ['#3f96a5', '#3f96a5'],\n\n      mergedColor: []\n    }\n  },\n  watch: {\n    color () {\n      const { mergeColor } = this\n\n      mergeColor()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcSVGData } = this\n\n      calcSVGData()\n    },\n    calcSVGData () {\n      const { width, height } = this\n\n      let line1Points = [\n        [0, height * 0.2], [width * 0.18, height * 0.2], [width * 0.2, height * 0.4], [width * 0.25, height * 0.4],\n        [width * 0.27, height * 0.6], [width * 0.72, height * 0.6], [width * 0.75, height * 0.4],\n        [width * 0.8, height * 0.4], [width * 0.82, height * 0.2], [width, height * 0.2]\n      ]\n\n      let line2Points = [\n        [width * 0.3, height * 0.8], [width * 0.7, height * 0.8]\n      ]\n\n      const line1Length = getPolylineLength(line1Points)\n      const line2Length = getPolylineLength(line2Points)\n\n      line1Points = line1Points.map(point => point.join(',')).join(' ')\n      line2Points = line2Points.map(point => point.join(',')).join(' ')\n\n      this.line1Points = line1Points\n      this.line2Points = line2Points\n\n      this.line1Length = line1Length\n      this.line2Length = line2Length\n    },\n    onResize () {\n      const { calcSVGData } = this\n\n      calcSVGData()\n    },\n    mergeColor () {\n      const { color, defaultColor } = this\n\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || [])\n    }\n  },\n  mounted () {\n    const { mergeColor } = this\n\n    mergeColor()\n  }\n}\n</script>"],"sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/decoration5/src"}]}