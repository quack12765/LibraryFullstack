{"remainingRequest":"/home/user_2200475/library_PROJ/source/front-end/node_modules/babel-loader/lib/index.js!/home/user_2200475/library_PROJ/source/front-end/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/user_2200475/library_PROJ/source/front-end/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/user_2200475/library_PROJ/source/front-end/node_modules/@jiaminghi/data-view/lib/components/flylineChart/src/main.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/user_2200475/library_PROJ/source/front-end/node_modules/@jiaminghi/data-view/lib/components/flylineChart/src/main.vue","mtime":499162500000},{"path":"/home/user_2200475/library_PROJ/source/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user_2200475/library_PROJ/source/front-end/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/user_2200475/library_PROJ/source/front-end/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user_2200475/library_PROJ/source/front-end/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLiIpOyB9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICJ1bmRlZmluZWQiICYmIFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9CgpmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShhcnIpOyB9CgpmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC4iKTsgfQoKZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSAic3RyaW5nIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09ICJPYmplY3QiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSAiTWFwIiB8fCBuID09PSAiU2V0IikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSAiQXJndW1lbnRzIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH0KCmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gInVuZGVmaW5lZCIgfHwgIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pWyJyZXR1cm4iXSAhPSBudWxsKSBfaVsicmV0dXJuIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9CgpmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH0KCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsgdHJ5IHsgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOyB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOyB9IGNhdGNoIChlcnJvcikgeyByZWplY3QoZXJyb3IpOyByZXR1cm47IH0gaWYgKGluZm8uZG9uZSkgeyByZXNvbHZlKHZhbHVlKTsgfSBlbHNlIHsgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOyB9IH0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOyB9IF9uZXh0KHVuZGVmaW5lZCk7IH0pOyB9OyB9CgovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgeyBkZWVwTWVyZ2UgfSBmcm9tICdAamlhbWluZ2hpL2NoYXJ0cy9saWIvdXRpbC9pbmRleCc7CmltcG9ydCB7IGRlZXBDbG9uZSB9IGZyb20gJ0BqaWFtaW5naGkvYy1yZW5kZXIvbGliL3BsdWdpbi91dGlsJzsKaW1wb3J0IHsgcmFuZG9tRXh0ZW5kLCBnZXRQb2ludERpc3RhbmNlLCB1dWlkIH0gZnJvbSAnLi4vLi4vLi4vdXRpbC9pbmRleCc7CmltcG9ydCBhdXRvUmVzaXplIGZyb20gJy4uLy4uLy4uL21peGluL2F1dG9SZXNpemUnOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0R2Rmx5bGluZUNoYXJ0JywKICBtaXhpbnM6IFthdXRvUmVzaXplXSwKICBwcm9wczogewogICAgY29uZmlnOiB7CiAgICAgIHR5cGU6IE9iamVjdCwKICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7CiAgICAgICAgcmV0dXJuIHt9OwogICAgICB9CiAgICB9LAogICAgZGV2OiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9CiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgdmFyIGlkID0gdXVpZCgpOwogICAgcmV0dXJuIHsKICAgICAgcmVmOiAnZHYtZmx5bGluZS1jaGFydCcsCiAgICAgIHVuaXF1ZTogTWF0aC5yYW5kb20oKSwKICAgICAgbWFza0lkOiAiZmx5bGluZS1tYXNrLWlkLSIuY29uY2F0KGlkKSwKICAgICAgbWFza0NpcmNsZUlkOiAibWFzay1jaXJjbGUtaWQtIi5jb25jYXQoaWQpLAogICAgICBncmFkaWVudElkOiAiZ3JhZGllbnQtaWQtIi5jb25jYXQoaWQpLAogICAgICBncmFkaWVudDJJZDogImdyYWRpZW50Mi1pZC0iLmNvbmNhdChpZCksCiAgICAgIGRlZmF1bHRDb25maWc6IHsKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzY3JpcHRpb24gRmx5bGluZSBjaGFydCBjZW50ZXIgcG9pbnQKICAgICAgICAgKiBAdHlwZSB7QXJyYXk8TnVtYmVyPn0KICAgICAgICAgKiBAZGVmYXVsdCBjZW50ZXJQb2ludCA9IFswLCAwXQogICAgICAgICAqLwogICAgICAgIGNlbnRlclBvaW50OiBbMCwgMF0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjcmlwdGlvbiBGbHlsaW5lIHN0YXJ0IHBvaW50cwogICAgICAgICAqIEB0eXBlIHtBcnJheTxBcnJheTxOdW1iZXI+Pn0KICAgICAgICAgKiBAZGVmYXVsdCBwb2ludHMgPSBbXQogICAgICAgICAqIEBleGFtcGxlIHBvaW50cyA9IFtbMTAsIDEwXSwgWzEwMCwgMTAwXV0KICAgICAgICAgKi8KICAgICAgICBwb2ludHM6IFtdLAoKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzY3JpcHRpb24gRmx5bGluZSB3aWR0aAogICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9CiAgICAgICAgICogQGRlZmF1bHQgbGluZVdpZHRoID0gMQogICAgICAgICAqLwogICAgICAgIGxpbmVXaWR0aDogMSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIE9yYml0IGNvbG9yCiAgICAgICAgICogQHR5cGUge1N0cmluZ30KICAgICAgICAgKiBAZGVmYXVsdCBvcmJpdENvbG9yID0gJ3JnYmEoMTAzLCAyMjQsIDIyNywgLjIpJwogICAgICAgICAqLwogICAgICAgIG9yYml0Q29sb3I6ICdyZ2JhKDEwMywgMjI0LCAyMjcsIC4yKScsCgogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjcmlwdGlvbiBGbHlsaW5lIGNvbG9yCiAgICAgICAgICogQHR5cGUge1N0cmluZ30KICAgICAgICAgKiBAZGVmYXVsdCBvcmJpdENvbG9yID0gJyNmZmRlOTMnCiAgICAgICAgICovCiAgICAgICAgZmx5bGluZUNvbG9yOiAnI2ZmZGU5MycsCgogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjcmlwdGlvbiBLIHZhbHVlCiAgICAgICAgICogQHR5cGUge051bWJlcn0KICAgICAgICAgKiBAZGVmYXVsdCBrID0gLTAuNQogICAgICAgICAqIEBleGFtcGxlIGsgPSAtMSB+IDEKICAgICAgICAgKi8KICAgICAgICBrOiAtMC41LAoKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzY3JpcHRpb24gRmx5bGluZSBjdXJ2YXR1cmUKICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfQogICAgICAgICAqIEBkZWZhdWx0IGN1cnZhdHVyZSA9IDUKICAgICAgICAgKi8KICAgICAgICBjdXJ2YXR1cmU6IDUsCgogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjcmlwdGlvbiBGbHlsaW5lIHJhZGl1cwogICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9CiAgICAgICAgICogQGRlZmF1bHQgZmx5bGluZVJhZGl1cyA9IDEwMAogICAgICAgICAqLwogICAgICAgIGZseWxpbmVSYWRpdXM6IDEwMCwKCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIEZseWxpbmUgYW5pbWF0aW9uIGR1cmF0aW9uCiAgICAgICAgICogQHR5cGUge0FycmF5PE51bWJlcj59CiAgICAgICAgICogQGRlZmF1bHQgZHVyYXRpb24gPSBbMjAsIDMwXQogICAgICAgICAqLwogICAgICAgIGR1cmF0aW9uOiBbMjAsIDMwXSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIFJlbGF0aXZlIHBvaW50cyBwb3NpdGlvbgogICAgICAgICAqIEB0eXBlIHtCb29sZWFufQogICAgICAgICAqIEBkZWZhdWx0IHJlbGF0aXZlID0gdHJ1ZQogICAgICAgICAqLwogICAgICAgIHJlbGF0aXZlOiB0cnVlLAoKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzY3JpcHRpb24gQmFjayBncm91bmQgaW1hZ2UgdXJsCiAgICAgICAgICogQHR5cGUge1N0cmluZ30KICAgICAgICAgKiBAZGVmYXVsdCBiZ0ltZ1VybCA9ICcnCiAgICAgICAgICogQGV4YW1wbGUgYmdJbWdVcmwgPSAnLi9pbWcvYmcuanBnJwogICAgICAgICAqLwogICAgICAgIGJnSW1nVXJsOiAnJywKCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIFRleHQgY29uZmlndXJhdGlvbgogICAgICAgICAqIEB0eXBlIHtPYmplY3R9CiAgICAgICAgICovCiAgICAgICAgdGV4dDogewogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAZGVzY3JpcHRpb24gVGV4dCBvZmZzZXQKICAgICAgICAgICAqIEB0eXBlIHtBcnJheTxOdW1iZXI+fQogICAgICAgICAgICogQGRlZmF1bHQgb2Zmc2V0ID0gWzAsIDE1XQogICAgICAgICAgICovCiAgICAgICAgICBvZmZzZXQ6IFswLCAxNV0sCgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAZGVzY3JpcHRpb24gVGV4dCBjb2xvcgogICAgICAgICAgICogQHR5cGUge1N0cmluZ30KICAgICAgICAgICAqIEBkZWZhdWx0IGNvbG9yID0gJyNmZmRiNWMnCiAgICAgICAgICAgKi8KICAgICAgICAgIGNvbG9yOiAnI2ZmZGI1YycsCgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAZGVzY3JpcHRpb24gVGV4dCBmb250IHNpemUKICAgICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9CiAgICAgICAgICAgKiBAZGVmYXVsdCBmb250U2l6ZSA9IDEyCiAgICAgICAgICAgKi8KICAgICAgICAgIGZvbnRTaXplOiAxMgogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjcmlwdGlvbiBIYWxvIGNvbmZpZ3VyYXRpb24KICAgICAgICAgKiBAdHlwZSB7T2JqZWN0fQogICAgICAgICAqLwogICAgICAgIGhhbG86IHsKICAgICAgICAgIC8qKgogICAgICAgICAgICogQGRlc2NyaXB0aW9uIFdlYXRoZXIgdG8gc2hvdyBoYWxvCiAgICAgICAgICAgKiBAdHlwZSB7Qm9vbGVhbn0KICAgICAgICAgICAqIEBkZWZhdWx0IHNob3cgPSB0cnVlCiAgICAgICAgICAgKiBAZXhhbXBsZSBzaG93ID0gdHJ1ZSB8IGZhbHNlCiAgICAgICAgICAgKi8KICAgICAgICAgIHNob3c6IHRydWUsCgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAZGVzY3JpcHRpb24gSGFsbyBhbmltYXRpb24gZHVyYXRpb24gKDEwID0gMXMpCiAgICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfQogICAgICAgICAgICogQGRlZmF1bHQgZHVyYXRpb24gPSAzMAogICAgICAgICAgICovCiAgICAgICAgICBkdXJhdGlvbjogMzAsCgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAZGVzY3JpcHRpb24gSGFsbyBjb2xvcgogICAgICAgICAgICogQHR5cGUge1N0cmluZ30KICAgICAgICAgICAqIEBkZWZhdWx0IGNvbG9yID0gJyNmYjcyOTMnCiAgICAgICAgICAgKi8KICAgICAgICAgIGNvbG9yOiAnI2ZiNzI5MycsCgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAZGVzY3JpcHRpb24gSGFsbyBtYXggcmFkaXVzCiAgICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfQogICAgICAgICAgICogQGRlZmF1bHQgcmFkaXVzID0gMTIwCiAgICAgICAgICAgKi8KICAgICAgICAgIHJhZGl1czogMTIwCiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIENlbnRlciBwb2ludCBpbWcgY29uZmlndXJhdGlvbgogICAgICAgICAqIEB0eXBlIHtPYmplY3R9CiAgICAgICAgICovCiAgICAgICAgY2VudGVyUG9pbnRJbWc6IHsKICAgICAgICAgIC8qKgogICAgICAgICAgICogQGRlc2NyaXB0aW9uIENlbnRlciBwb2ludCBpbWcgd2lkdGgKICAgICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9CiAgICAgICAgICAgKiBAZGVmYXVsdCB3aWR0aCA9IDQwCiAgICAgICAgICAgKi8KICAgICAgICAgIHdpZHRoOiA0MCwKCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEBkZXNjcmlwdGlvbiBDZW50ZXIgcG9pbnQgaW1nIGhlaWdodAogICAgICAgICAgICogQHR5cGUge051bWJlcn0KICAgICAgICAgICAqIEBkZWZhdWx0IGhlaWdodCA9IDQwCiAgICAgICAgICAgKi8KICAgICAgICAgIGhlaWdodDogNDAsCgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2VudGVyIHBvaW50IGltZyB1cmwKICAgICAgICAgICAqIEB0eXBlIHtTdHJpbmd9CiAgICAgICAgICAgKiBAZGVmYXVsdCB1cmwgPSAnJwogICAgICAgICAgICovCiAgICAgICAgICB1cmw6ICcnCiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIFBvaW50cyBpbWcgY29uZmlndXJhdGlvbgogICAgICAgICAqIEB0eXBlIHtPYmplY3R9CiAgICAgICAgICogQGRlZmF1bHQgcmFkaXVzID0gMTIwCiAgICAgICAgICovCiAgICAgICAgcG9pbnRzSW1nOiB7CiAgICAgICAgICAvKioKICAgICAgICAgICAqIEBkZXNjcmlwdGlvbiBQb2ludHMgaW1nIHdpZHRoCiAgICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfQogICAgICAgICAgICogQGRlZmF1bHQgd2lkdGggPSAxNQogICAgICAgICAgICovCiAgICAgICAgICB3aWR0aDogMTUsCgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAZGVzY3JpcHRpb24gUG9pbnRzIGltZyBoZWlnaHQKICAgICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9CiAgICAgICAgICAgKiBAZGVmYXVsdCBoZWlnaHQgPSAxNQogICAgICAgICAgICovCiAgICAgICAgICBoZWlnaHQ6IDE1LAoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQGRlc2NyaXB0aW9uIFBvaW50cyBpbWcgdXJsCiAgICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICAgICAgICogQGRlZmF1bHQgdXJsID0gJycKICAgICAgICAgICAqLwogICAgICAgICAgdXJsOiAnJwogICAgICAgIH0KICAgICAgfSwKICAgICAgbWVyZ2VkQ29uZmlnOiBudWxsLAogICAgICBwYXRoczogW10sCiAgICAgIGxlbmd0aHM6IFtdLAogICAgICB0aW1lczogW10sCiAgICAgIHRleHRzOiBbXQogICAgfTsKICB9LAogIHdhdGNoOiB7CiAgICBjb25maWc6IGZ1bmN0aW9uIGNvbmZpZygpIHsKICAgICAgdmFyIGNhbGNEYXRhID0gdGhpcy5jYWxjRGF0YTsKICAgICAgY2FsY0RhdGEoKTsKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIGFmdGVyQXV0b1Jlc2l6ZU1peGluSW5pdDogZnVuY3Rpb24gYWZ0ZXJBdXRvUmVzaXplTWl4aW5Jbml0KCkgewogICAgICB2YXIgY2FsY0RhdGEgPSB0aGlzLmNhbGNEYXRhOwogICAgICBjYWxjRGF0YSgpOwogICAgfSwKICAgIG9uUmVzaXplOiBmdW5jdGlvbiBvblJlc2l6ZSgpIHsKICAgICAgdmFyIGNhbGNEYXRhID0gdGhpcy5jYWxjRGF0YTsKICAgICAgY2FsY0RhdGEoKTsKICAgIH0sCiAgICBjYWxjRGF0YTogZnVuY3Rpb24gY2FsY0RhdGEoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciBtZXJnZUNvbmZpZywgY3JlYXRlRmx5bGluZVBhdGhzLCBjYWxjTGluZUxlbmd0aHMsIGNhbGNUaW1lcywgY2FsY1RleHRzOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIG1lcmdlQ29uZmlnID0gX3RoaXMubWVyZ2VDb25maWcsIGNyZWF0ZUZseWxpbmVQYXRocyA9IF90aGlzLmNyZWF0ZUZseWxpbmVQYXRocywgY2FsY0xpbmVMZW5ndGhzID0gX3RoaXMuY2FsY0xpbmVMZW5ndGhzOwogICAgICAgICAgICAgICAgbWVyZ2VDb25maWcoKTsKICAgICAgICAgICAgICAgIGNyZWF0ZUZseWxpbmVQYXRocygpOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU7CiAgICAgICAgICAgICAgICByZXR1cm4gY2FsY0xpbmVMZW5ndGhzKCk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIGNhbGNUaW1lcyA9IF90aGlzLmNhbGNUaW1lcywgY2FsY1RleHRzID0gX3RoaXMuY2FsY1RleHRzOwogICAgICAgICAgICAgICAgY2FsY1RpbWVzKCk7CiAgICAgICAgICAgICAgICBjYWxjVGV4dHMoKTsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIG1lcmdlQ29uZmlnOiBmdW5jdGlvbiBtZXJnZUNvbmZpZygpIHsKICAgICAgdmFyIGNvbmZpZyA9IHRoaXMuY29uZmlnLAogICAgICAgICAgZGVmYXVsdENvbmZpZyA9IHRoaXMuZGVmYXVsdENvbmZpZzsKICAgICAgdmFyIG1lcmdlZENvbmZpZyA9IGRlZXBNZXJnZShkZWVwQ2xvbmUoZGVmYXVsdENvbmZpZywgdHJ1ZSksIGNvbmZpZyB8fCB7fSk7CiAgICAgIHZhciBwb2ludHMgPSBtZXJnZWRDb25maWcucG9pbnRzOwogICAgICBtZXJnZWRDb25maWcucG9pbnRzID0gcG9pbnRzLm1hcChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgIGlmIChpdGVtIGluc3RhbmNlb2YgQXJyYXkpIHsKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHBvc2l0aW9uOiBpdGVtLAogICAgICAgICAgICB0ZXh0OiAnJwogICAgICAgICAgfTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBpdGVtOwogICAgICB9KTsKICAgICAgdGhpcy5tZXJnZWRDb25maWcgPSBtZXJnZWRDb25maWc7CiAgICB9LAogICAgY3JlYXRlRmx5bGluZVBhdGhzOiBmdW5jdGlvbiBjcmVhdGVGbHlsaW5lUGF0aHMoKSB7CiAgICAgIHZhciBnZXRQYXRoID0gdGhpcy5nZXRQYXRoLAogICAgICAgICAgbWVyZ2VkQ29uZmlnID0gdGhpcy5tZXJnZWRDb25maWcsCiAgICAgICAgICB3aWR0aCA9IHRoaXMud2lkdGgsCiAgICAgICAgICBoZWlnaHQgPSB0aGlzLmhlaWdodDsKICAgICAgdmFyIGNlbnRlclBvaW50ID0gbWVyZ2VkQ29uZmlnLmNlbnRlclBvaW50LAogICAgICAgICAgcG9pbnRzID0gbWVyZ2VkQ29uZmlnLnBvaW50cywKICAgICAgICAgIHJlbGF0aXZlID0gbWVyZ2VkQ29uZmlnLnJlbGF0aXZlOwogICAgICBwb2ludHMgPSBwb2ludHMubWFwKGZ1bmN0aW9uIChfcmVmKSB7CiAgICAgICAgdmFyIHBvc2l0aW9uID0gX3JlZi5wb3NpdGlvbjsKICAgICAgICByZXR1cm4gcG9zaXRpb247CiAgICAgIH0pOwoKICAgICAgaWYgKHJlbGF0aXZlKSB7CiAgICAgICAgY2VudGVyUG9pbnQgPSBbd2lkdGggKiBjZW50ZXJQb2ludFswXSwgaGVpZ2h0ICogY2VudGVyUG9pbnRbMV1dOwogICAgICAgIHBvaW50cyA9IHBvaW50cy5tYXAoZnVuY3Rpb24gKF9yZWYyKSB7CiAgICAgICAgICB2YXIgX3JlZjMgPSBfc2xpY2VkVG9BcnJheShfcmVmMiwgMiksCiAgICAgICAgICAgICAgeCA9IF9yZWYzWzBdLAogICAgICAgICAgICAgIHkgPSBfcmVmM1sxXTsKCiAgICAgICAgICByZXR1cm4gW3dpZHRoICogeCwgaGVpZ2h0ICogeV07CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIHRoaXMucGF0aHMgPSBwb2ludHMubWFwKGZ1bmN0aW9uIChwb2ludCkgewogICAgICAgIHJldHVybiBnZXRQYXRoKGNlbnRlclBvaW50LCBwb2ludCk7CiAgICAgIH0pOwogICAgfSwKICAgIGdldFBhdGg6IGZ1bmN0aW9uIGdldFBhdGgoY2VudGVyLCBwb2ludCkgewogICAgICB2YXIgZ2V0Q29udHJvbFBvaW50ID0gdGhpcy5nZXRDb250cm9sUG9pbnQ7CiAgICAgIHZhciBjb250cm9sUG9pbnQgPSBnZXRDb250cm9sUG9pbnQoY2VudGVyLCBwb2ludCk7CiAgICAgIHJldHVybiBbcG9pbnQsIGNvbnRyb2xQb2ludCwgY2VudGVyXTsKICAgIH0sCiAgICBnZXRDb250cm9sUG9pbnQ6IGZ1bmN0aW9uIGdldENvbnRyb2xQb2ludChfcmVmNCwgX3JlZjUpIHsKICAgICAgdmFyIF9yZWY2ID0gX3NsaWNlZFRvQXJyYXkoX3JlZjQsIDIpLAogICAgICAgICAgc3ggPSBfcmVmNlswXSwKICAgICAgICAgIHN5ID0gX3JlZjZbMV07CgogICAgICB2YXIgX3JlZjcgPSBfc2xpY2VkVG9BcnJheShfcmVmNSwgMiksCiAgICAgICAgICBleCA9IF9yZWY3WzBdLAogICAgICAgICAgZXkgPSBfcmVmN1sxXTsKCiAgICAgIHZhciBnZXRLTGluZVBvaW50Qnl4ID0gdGhpcy5nZXRLTGluZVBvaW50Qnl4LAogICAgICAgICAgbWVyZ2VkQ29uZmlnID0gdGhpcy5tZXJnZWRDb25maWc7CiAgICAgIHZhciBjdXJ2YXR1cmUgPSBtZXJnZWRDb25maWcuY3VydmF0dXJlLAogICAgICAgICAgayA9IG1lcmdlZENvbmZpZy5rOwogICAgICB2YXIgbXggPSAoc3ggKyBleCkgLyAyLAogICAgICAgICAgbXkgPSAoc3kgKyBleSkgLyAyOwogICAgICB2YXIgZGlzdGFuY2UgPSBnZXRQb2ludERpc3RhbmNlKFtzeCwgc3ldLCBbZXgsIGV5XSk7CiAgICAgIHZhciB0YXJnZXRMZW5ndGggPSBkaXN0YW5jZSAvIGN1cnZhdHVyZTsKICAgICAgdmFyIGRpc0RpdmVkID0gdGFyZ2V0TGVuZ3RoIC8gMjsKICAgICAgdmFyIGR4ID0gbXgsCiAgICAgICAgICBkeSA9IG15OwoKICAgICAgZG8gewogICAgICAgIGR4ICs9IGRpc0RpdmVkOwogICAgICAgIGR5ID0gZ2V0S0xpbmVQb2ludEJ5eChrLCBbbXgsIG15XSwgZHgpWzFdOwogICAgICB9IHdoaWxlIChnZXRQb2ludERpc3RhbmNlKFtteCwgbXldLCBbZHgsIGR5XSkgPCB0YXJnZXRMZW5ndGgpOwoKICAgICAgcmV0dXJuIFtkeCwgZHldOwogICAgfSwKICAgIGdldEtMaW5lUG9pbnRCeXg6IGZ1bmN0aW9uIGdldEtMaW5lUG9pbnRCeXgoaywgX3JlZjgsIHgpIHsKICAgICAgdmFyIF9yZWY5ID0gX3NsaWNlZFRvQXJyYXkoX3JlZjgsIDIpLAogICAgICAgICAgbHggPSBfcmVmOVswXSwKICAgICAgICAgIGx5ID0gX3JlZjlbMV07CgogICAgICB2YXIgeSA9IGx5IC0gayAqIGx4ICsgayAqIHg7CiAgICAgIHJldHVybiBbeCwgeV07CiAgICB9LAogICAgY2FsY0xpbmVMZW5ndGhzOiBmdW5jdGlvbiBjYWxjTGluZUxlbmd0aHMoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgICAgdmFyICRuZXh0VGljaywgcGF0aHMsICRyZWZzOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAkbmV4dFRpY2sgPSBfdGhpczIuJG5leHRUaWNrLCBwYXRocyA9IF90aGlzMi5wYXRocywgJHJlZnMgPSBfdGhpczIuJHJlZnM7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gJG5leHRUaWNrKCk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIF90aGlzMi5sZW5ndGhzID0gcGF0aHMubWFwKGZ1bmN0aW9uIChmb28sIGkpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuICRyZWZzWyJwYXRoIi5jb25jYXQoaSldWzBdLmdldFRvdGFsTGVuZ3RoKCk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgY2FsY1RpbWVzOiBmdW5jdGlvbiBjYWxjVGltZXMoKSB7CiAgICAgIHZhciBfdGhpcyRtZXJnZWRDb25maWcgPSB0aGlzLm1lcmdlZENvbmZpZywKICAgICAgICAgIGR1cmF0aW9uID0gX3RoaXMkbWVyZ2VkQ29uZmlnLmR1cmF0aW9uLAogICAgICAgICAgcG9pbnRzID0gX3RoaXMkbWVyZ2VkQ29uZmlnLnBvaW50czsKICAgICAgdGhpcy50aW1lcyA9IHBvaW50cy5tYXAoZnVuY3Rpb24gKGZvbykgewogICAgICAgIHJldHVybiByYW5kb21FeHRlbmQuYXBwbHkodm9pZCAwLCBfdG9Db25zdW1hYmxlQXJyYXkoZHVyYXRpb24pKSAvIDEwOwogICAgICB9KTsKICAgIH0sCiAgICBjYWxjVGV4dHM6IGZ1bmN0aW9uIGNhbGNUZXh0cygpIHsKICAgICAgdmFyIHBvaW50cyA9IHRoaXMubWVyZ2VkQ29uZmlnLnBvaW50czsKICAgICAgdGhpcy50ZXh0cyA9IHBvaW50cy5tYXAoZnVuY3Rpb24gKF9yZWYxMCkgewogICAgICAgIHZhciB0ZXh0ID0gX3JlZjEwLnRleHQ7CiAgICAgICAgcmV0dXJuIHRleHQ7CiAgICAgIH0pOwogICAgfSwKICAgIGNvbnNvbGVDbGlja1BvczogZnVuY3Rpb24gY29uc29sZUNsaWNrUG9zKF9yZWYxMSkgewogICAgICB2YXIgb2Zmc2V0WCA9IF9yZWYxMS5vZmZzZXRYLAogICAgICAgICAgb2Zmc2V0WSA9IF9yZWYxMS5vZmZzZXRZOwogICAgICB2YXIgd2lkdGggPSB0aGlzLndpZHRoLAogICAgICAgICAgaGVpZ2h0ID0gdGhpcy5oZWlnaHQsCiAgICAgICAgICBkZXYgPSB0aGlzLmRldjsKICAgICAgaWYgKCFkZXYpIHJldHVybjsKICAgICAgdmFyIHJlbGF0aXZlWCA9IChvZmZzZXRYIC8gd2lkdGgpLnRvRml4ZWQoMik7CiAgICAgIHZhciByZWxhdGl2ZVkgPSAob2Zmc2V0WSAvIGhlaWdodCkudG9GaXhlZCgyKTsKICAgICAgY29uc29sZS53YXJuKCJkdi1mbHlsaW5lLWNoYXJ0IERFVjogXG4gQ2xpY2sgUG9zaXRpb24gaXMgWyIuY29uY2F0KG9mZnNldFgsICIsICIpLmNvbmNhdChvZmZzZXRZLCAiXSBcbiBSZWxhdGl2ZSBQb3NpdGlvbiBpcyBbIikuY29uY2F0KHJlbGF0aXZlWCwgIiwgIikuY29uY2F0KHJlbGF0aXZlWSwgIl0iKSk7CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["main.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuJA,SAAA,SAAA,QAAA,kCAAA;AAEA,SAAA,SAAA,QAAA,qCAAA;AAEA,SAAA,YAAA,EAAA,gBAAA,EAAA,IAAA,QAAA,qBAAA;AAEA,OAAA,UAAA,MAAA,2BAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,gBADA;AAEA,EAAA,MAAA,EAAA,CAAA,UAAA,CAFA;AAGA,EAAA,KAAA,EAAA;AACA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAAA,eAAA,EAAA;AAAA;AAFA,KADA;AAKA,IAAA,GAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA;AALA,GAHA;AAaA,EAAA,IAbA,kBAaA;AACA,QAAA,EAAA,GAAA,IAAA,EAAA;AACA,WAAA;AACA,MAAA,GAAA,EAAA,kBADA;AAEA,MAAA,MAAA,EAAA,IAAA,CAAA,MAAA,EAFA;AAGA,MAAA,MAAA,4BAAA,EAAA,CAHA;AAIA,MAAA,YAAA,2BAAA,EAAA,CAJA;AAKA,MAAA,UAAA,wBAAA,EAAA,CALA;AAMA,MAAA,WAAA,yBAAA,EAAA,CANA;AAQA,MAAA,aAAA,EAAA;AACA;;;;;AAKA,QAAA,WAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CANA;;AAOA;;;;;;AAMA,QAAA,MAAA,EAAA,EAbA;;AAcA;;;;;AAKA,QAAA,SAAA,EAAA,CAnBA;;AAoBA;;;;;AAKA,QAAA,UAAA,EAAA,yBAzBA;;AA0BA;;;;;AAKA,QAAA,YAAA,EAAA,SA/BA;;AAgCA;;;;;;AAMA,QAAA,CAAA,EAAA,CAAA,GAtCA;;AAuCA;;;;;AAKA,QAAA,SAAA,EAAA,CA5CA;;AA6CA;;;;;AAKA,QAAA,aAAA,EAAA,GAlDA;;AAmDA;;;;;AAKA,QAAA,QAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAxDA;;AAyDA;;;;;AAKA,QAAA,QAAA,EAAA,IA9DA;;AA+DA;;;;;;AAMA,QAAA,QAAA,EAAA,EArEA;;AAsEA;;;;AAIA,QAAA,IAAA,EAAA;AACA;;;;;AAKA,UAAA,MAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CANA;;AAOA;;;;;AAKA,UAAA,KAAA,EAAA,SAZA;;AAaA;;;;;AAKA,UAAA,QAAA,EAAA;AAlBA,SA1EA;;AA8FA;;;;AAIA,QAAA,IAAA,EAAA;AACA;;;;;;AAMA,UAAA,IAAA,EAAA,IAPA;;AAQA;;;;;AAKA,UAAA,QAAA,EAAA,EAbA;;AAcA;;;;;AAKA,UAAA,KAAA,EAAA,SAnBA;;AAoBA;;;;;AAKA,UAAA,MAAA,EAAA;AAzBA,SAlGA;;AA6HA;;;;AAIA,QAAA,cAAA,EAAA;AACA;;;;;AAKA,UAAA,KAAA,EAAA,EANA;;AAOA;;;;;AAKA,UAAA,MAAA,EAAA,EAZA;;AAaA;;;;;AAKA,UAAA,GAAA,EAAA;AAlBA,SAjIA;;AAqJA;;;;;AAKA,QAAA,SAAA,EAAA;AACA;;;;;AAKA,UAAA,KAAA,EAAA,EANA;;AAOA;;;;;AAKA,UAAA,MAAA,EAAA,EAZA;;AAaA;;;;;AAKA,UAAA,GAAA,EAAA;AAlBA;AA1JA,OARA;AAwLA,MAAA,YAAA,EAAA,IAxLA;AA0LA,MAAA,KAAA,EAAA,EA1LA;AA2LA,MAAA,OAAA,EAAA,EA3LA;AA4LA,MAAA,KAAA,EAAA,EA5LA;AA6LA,MAAA,KAAA,EAAA;AA7LA,KAAA;AA+LA,GA9MA;AA+MA,EAAA,KAAA,EAAA;AACA,IAAA,MADA,oBACA;AAAA,UACA,QADA,GACA,IADA,CACA,QADA;AAGA,MAAA,QAAA;AACA;AALA,GA/MA;AAsNA,EAAA,OAAA,EAAA;AACA,IAAA,wBADA,sCACA;AAAA,UACA,QADA,GACA,IADA,CACA,QADA;AAGA,MAAA,QAAA;AACA,KALA;AAMA,IAAA,QANA,sBAMA;AAAA,UACA,QADA,GACA,IADA,CACA,QADA;AAGA,MAAA,QAAA;AACA,KAVA;AAWA,IAAA,QAXA,sBAWA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,WADA,GACA,KADA,CACA,WADA,EACA,kBADA,GACA,KADA,CACA,kBADA,EACA,eADA,GACA,KADA,CACA,eADA;AAGA,gBAAA,WAAA;AAEA,gBAAA,kBAAA;AALA;AAAA,uBAOA,eAAA,EAPA;;AAAA;AASA,gBAAA,SATA,GASA,KATA,CASA,SATA,EASA,SATA,GASA,KATA,CASA,SATA;AAWA,gBAAA,SAAA;AAEA,gBAAA,SAAA;;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA,KAzBA;AA0BA,IAAA,WA1BA,yBA0BA;AAAA,UACA,MADA,GACA,IADA,CACA,MADA;AAAA,UACA,aADA,GACA,IADA,CACA,aADA;AAGA,UAAA,YAAA,GAAA,SAAA,CAAA,SAAA,CAAA,aAAA,EAAA,IAAA,CAAA,EAAA,MAAA,IAAA,EAAA,CAAA;AAHA,UAKA,MALA,GAKA,YALA,CAKA,MALA;AAOA,MAAA,YAAA,CAAA,MAAA,GAAA,MAAA,CAAA,GAAA,CAAA,UAAA,IAAA,EAAA;AACA,YAAA,IAAA,YAAA,KAAA,EAAA;AACA,iBAAA;AAAA,YAAA,QAAA,EAAA,IAAA;AAAA,YAAA,IAAA,EAAA;AAAA,WAAA;AACA;;AAEA,eAAA,IAAA;AACA,OANA,CAAA;AAQA,WAAA,YAAA,GAAA,YAAA;AACA,KA1CA;AA2CA,IAAA,kBA3CA,gCA2CA;AAAA,UACA,OADA,GACA,IADA,CACA,OADA;AAAA,UACA,YADA,GACA,IADA,CACA,YADA;AAAA,UACA,KADA,GACA,IADA,CACA,KADA;AAAA,UACA,MADA,GACA,IADA,CACA,MADA;AAAA,UAGA,WAHA,GAGA,YAHA,CAGA,WAHA;AAAA,UAGA,MAHA,GAGA,YAHA,CAGA,MAHA;AAAA,UAGA,QAHA,GAGA,YAHA,CAGA,QAHA;AAKA,MAAA,MAAA,GAAA,MAAA,CAAA,GAAA,CAAA;AAAA,YAAA,QAAA,QAAA,QAAA;AAAA,eAAA,QAAA;AAAA,OAAA,CAAA;;AAEA,UAAA,QAAA,EAAA;AACA,QAAA,WAAA,GAAA,CAAA,KAAA,GAAA,WAAA,CAAA,CAAA,CAAA,EAAA,MAAA,GAAA,WAAA,CAAA,CAAA,CAAA,CAAA;AACA,QAAA,MAAA,GAAA,MAAA,CAAA,GAAA,CAAA;AAAA;AAAA,cAAA,CAAA;AAAA,cAAA,CAAA;;AAAA,iBAAA,CAAA,KAAA,GAAA,CAAA,EAAA,MAAA,GAAA,CAAA,CAAA;AAAA,SAAA,CAAA;AACA;;AAEA,WAAA,KAAA,GAAA,MAAA,CAAA,GAAA,CAAA,UAAA,KAAA;AAAA,eAAA,OAAA,CAAA,WAAA,EAAA,KAAA,CAAA;AAAA,OAAA,CAAA;AACA,KAxDA;AAyDA,IAAA,OAzDA,mBAyDA,MAzDA,EAyDA,KAzDA,EAyDA;AAAA,UACA,eADA,GACA,IADA,CACA,eADA;AAGA,UAAA,YAAA,GAAA,eAAA,CAAA,MAAA,EAAA,KAAA,CAAA;AAEA,aAAA,CAAA,KAAA,EAAA,YAAA,EAAA,MAAA,CAAA;AACA,KA/DA;AAgEA,IAAA,eAhEA,yCAgEA;AAAA;AAAA,UAAA,EAAA;AAAA,UAAA,EAAA;;AAAA;AAAA,UAAA,EAAA;AAAA,UAAA,EAAA;;AAAA,UACA,gBADA,GACA,IADA,CACA,gBADA;AAAA,UACA,YADA,GACA,IADA,CACA,YADA;AAAA,UAGA,SAHA,GAGA,YAHA,CAGA,SAHA;AAAA,UAGA,CAHA,GAGA,YAHA,CAGA,CAHA;AAAA,UAKA,EALA,GAKA,CAAA,EAAA,GAAA,EAAA,IAAA,CALA;AAAA,UAKA,EALA,GAKA,CAAA,EAAA,GAAA,EAAA,IAAA,CALA;AAOA,UAAA,QAAA,GAAA,gBAAA,CAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,CAAA;AAEA,UAAA,YAAA,GAAA,QAAA,GAAA,SAAA;AACA,UAAA,QAAA,GAAA,YAAA,GAAA,CAAA;AAVA,UAYA,EAZA,GAYA,EAZA;AAAA,UAYA,EAZA,GAYA,EAZA;;AAcA,SAAA;AACA,QAAA,EAAA,IAAA,QAAA;AACA,QAAA,EAAA,GAAA,gBAAA,CAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA,CAAA;AACA,OAHA,QAGA,gBAAA,CAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,CAAA,GAAA,YAHA;;AAKA,aAAA,CAAA,EAAA,EAAA,EAAA,CAAA;AACA,KApFA;AAqFA,IAAA,gBArFA,4BAqFA,CArFA,SAqFA,CArFA,EAqFA;AAAA;AAAA,UAAA,EAAA;AAAA,UAAA,EAAA;;AACA,UAAA,CAAA,GAAA,EAAA,GAAA,CAAA,GAAA,EAAA,GAAA,CAAA,GAAA,CAAA;AAEA,aAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACA,KAzFA;AA0FA,IAAA,eA1FA,6BA0FA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,SADA,GACA,MADA,CACA,SADA,EACA,KADA,GACA,MADA,CACA,KADA,EACA,KADA,GACA,MADA,CACA,KADA;AAAA;AAAA,uBAGA,SAAA,EAHA;;AAAA;AAKA,gBAAA,MAAA,CAAA,OAAA,GAAA,KAAA,CAAA,GAAA,CAAA,UAAA,GAAA,EAAA,CAAA;AAAA,yBAAA,KAAA,eAAA,CAAA,EAAA,CAAA,CAAA,EAAA,cAAA,EAAA;AAAA,iBAAA,CAAA;;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,KAhGA;AAiGA,IAAA,SAjGA,uBAiGA;AAAA,+BACA,KAAA,YADA;AAAA,UACA,QADA,sBACA,QADA;AAAA,UACA,MADA,sBACA,MADA;AAGA,WAAA,KAAA,GAAA,MAAA,CAAA,GAAA,CAAA,UAAA,GAAA;AAAA,eAAA,YAAA,MAAA,4BAAA,QAAA,KAAA,EAAA;AAAA,OAAA,CAAA;AACA,KArGA;AAsGA,IAAA,SAtGA,uBAsGA;AAAA,UACA,MADA,GACA,KAAA,YADA,CACA,MADA;AAGA,WAAA,KAAA,GAAA,MAAA,CAAA,GAAA,CAAA;AAAA,YAAA,IAAA,UAAA,IAAA;AAAA,eAAA,IAAA;AAAA,OAAA,CAAA;AACA,KA1GA;AA2GA,IAAA,eA3GA,mCA2GA;AAAA,UAAA,OAAA,UAAA,OAAA;AAAA,UAAA,OAAA,UAAA,OAAA;AAAA,UACA,KADA,GACA,IADA,CACA,KADA;AAAA,UACA,MADA,GACA,IADA,CACA,MADA;AAAA,UACA,GADA,GACA,IADA,CACA,GADA;AAGA,UAAA,CAAA,GAAA,EAAA;AAEA,UAAA,SAAA,GAAA,CAAA,OAAA,GAAA,KAAA,EAAA,OAAA,CAAA,CAAA,CAAA;AACA,UAAA,SAAA,GAAA,CAAA,OAAA,GAAA,MAAA,EAAA,OAAA,CAAA,CAAA,CAAA;AAEA,MAAA,OAAA,CAAA,IAAA,uDAAA,OAAA,eAAA,OAAA,wCAAA,SAAA,eAAA,SAAA;AACA;AApHA;AAtNA,CAAA","sourcesContent":["<template>\n  <div\n    class=\"dv-flyline-chart\"\n    ref=\"dv-flyline-chart\"\n    :style=\"`background-image: url(${mergedConfig ? mergedConfig.bgImgUrl : ''})`\"\n    @click=\"consoleClickPos\"\n  >\n    <svg v-if=\"mergedConfig\" :width=\"width\" :height=\"height\">\n      <defs>\n        <radialGradient\n          :id=\"gradientId\"\n          cx=\"50%\" cy=\"50%\" r=\"50%\"\n        >\n          <stop\n            offset=\"0%\" stop-color=\"#fff\"\n            stop-opacity=\"1\"\n          />\n          <stop\n            offset=\"100%\" stop-color=\"#fff\"\n            stop-opacity=\"0\"\n          />\n        </radialGradient>\n\n        <radialGradient\n          :id=\"gradient2Id\"\n          cx=\"50%\" cy=\"50%\" r=\"50%\"\n        >\n          <stop\n            offset=\"0%\" stop-color=\"#fff\"\n            stop-opacity=\"0\"\n          />\n          <stop\n            offset=\"100%\" stop-color=\"#fff\"\n            stop-opacity=\"1\"\n          />\n        </radialGradient>\n\n        <circle\n          v-if=\"paths[0]\"\n          :id=\"`circle${paths[0].toString()}`\"\n          :cx=\"paths[0][2][0]\"\n          :cy=\"paths[0][2][1]\"\n        >\n          <animate\n            attributeName=\"r\"\n            :values=\"`1;${mergedConfig.halo.radius}`\"\n            :dur=\"mergedConfig.halo.duration / 10 + 's'\"\n            repeatCount=\"indefinite\"\n          />\n          <animate\n            attributeName=\"opacity\"\n            values=\"1;0\"\n            :dur=\"mergedConfig.halo.duration / 10 + 's'\"\n            repeatCount=\"indefinite\"\n          />\n        </circle>\n      </defs>\n\n      <image\n        v-if=\"paths[0]\"\n        :xlink:href=\"mergedConfig.centerPointImg.url\"\n        :width=\"mergedConfig.centerPointImg.width\"\n        :height=\"mergedConfig.centerPointImg.height\"\n        :x=\"paths[0][2][0] - mergedConfig.centerPointImg.width / 2\"\n        :y=\"paths[0][2][1] - mergedConfig.centerPointImg.height / 2\"\n      />\n\n      <mask :id=\"`maskhalo${paths[0].toString()}`\">\n        <use\n          v-if=\"paths[0]\"\n          :xlink:href=\"`#circle${paths[0].toString()}`\"\n          :fill=\"`url(#${gradient2Id})`\"\n        />\n      </mask>\n\n      <use\n        v-if=\"paths[0] && mergedConfig.halo.show\"\n        :xlink:href=\"`#circle${paths[0].toString()}`\"\n        :fill=\"mergedConfig.halo.color\"\n        :mask=\"`url(#maskhalo${paths[0].toString()})`\"\n      />\n\n      <g\n        v-for=\"(path, i) in paths\"\n        :key=\"i\"\n      >\n        <defs>\n          <path\n            :id=\"`path${path.toString()}`\"\n            :ref=\"`path${i}`\"\n            :d=\"`M${path[0].toString()} Q${path[1].toString()} ${path[2].toString()}`\"\n            fill=\"transparent\"\n          />\n        </defs>\n\n        <use\n          :xlink:href=\"`#path${path.toString()}`\"\n          :stroke-width=\"mergedConfig.lineWidth\"\n          :stroke=\"mergedConfig.orbitColor\"\n        />\n\n        <use\n          v-if=\"lengths[i]\"\n          :xlink:href=\"`#path${path.toString()}`\"\n          :stroke-width=\"mergedConfig.lineWidth\"\n          :stroke=\"mergedConfig.flylineColor\"\n          :mask=\"`url(#mask${unique}${path.toString()})`\"\n        >\n          <animate\n            attributeName=\"stroke-dasharray\"\n            :from=\"`0, ${lengths[i]}`\"\n            :to=\"`${lengths[i]}, 0`\"\n            :dur=\"times[i] || 0\"\n            repeatCount=\"indefinite\"\n          />\n        </use>\n\n        <mask :id=\"`mask${unique}${path.toString()}`\">\n          <circle cx=\"0\" cy=\"0\" :r=\"mergedConfig.flylineRadius\" :fill=\"`url(#${gradientId})`\">\n            <animateMotion\n              :dur=\"times[i] || 0\"\n              :path=\"`M${path[0].toString()} Q${path[1].toString()} ${path[2].toString()}`\"\n              rotate=\"auto\"\n              repeatCount=\"indefinite\"\n            />\n          </circle>\n        </mask>\n\n        <image\n          :xlink:href=\"mergedConfig.pointsImg.url\"\n          :width=\"mergedConfig.pointsImg.width\"\n          :height=\"mergedConfig.pointsImg.height\"\n          :x=\"path[0][0] - mergedConfig.pointsImg.width / 2\"\n          :y=\"path[0][1] - mergedConfig.pointsImg.height / 2\"\n        />\n\n        <text\n          :style=\"`fontSize:${mergedConfig.text.fontSize}px;`\"\n          :fill=\"mergedConfig.text.color\"\n          :x=\"path[0][0] + mergedConfig.text.offset[0]\"\n          :y=\"path[0][1] + mergedConfig.text.offset[1]\"\n        >\n          {{ texts[i] }}\n        </text>\n\n      </g>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nimport { randomExtend, getPointDistance, uuid } from '../../../util/index'\n\nimport autoResize from '../../../mixin/autoResize'\n\nexport default {\n  name: 'DvFlylineChart',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    },\n    dev: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data () {\n    const id = uuid()\n    return {\n      ref: 'dv-flyline-chart',\n      unique: Math.random(),\n      maskId: `flyline-mask-id-${id}`,\n      maskCircleId: `mask-circle-id-${id}`,\n      gradientId: `gradient-id-${id}`,\n      gradient2Id: `gradient2-id-${id}`,\n\n      defaultConfig: {\n        /**\n         * @description Flyline chart center point\n         * @type {Array<Number>}\n         * @default centerPoint = [0, 0]\n         */\n        centerPoint: [0, 0],\n        /**\n         * @description Flyline start points\n         * @type {Array<Array<Number>>}\n         * @default points = []\n         * @example points = [[10, 10], [100, 100]]\n         */\n        points: [],\n        /**\n         * @description Flyline width\n         * @type {Number}\n         * @default lineWidth = 1\n         */\n        lineWidth: 1,\n        /**\n         * @description Orbit color\n         * @type {String}\n         * @default orbitColor = 'rgba(103, 224, 227, .2)'\n         */\n        orbitColor: 'rgba(103, 224, 227, .2)',\n        /**\n         * @description Flyline color\n         * @type {String}\n         * @default orbitColor = '#ffde93'\n         */\n        flylineColor: '#ffde93',\n        /**\n         * @description K value\n         * @type {Number}\n         * @default k = -0.5\n         * @example k = -1 ~ 1\n         */\n        k: -0.5,\n        /**\n         * @description Flyline curvature\n         * @type {Number}\n         * @default curvature = 5\n         */\n        curvature: 5,\n        /**\n         * @description Flyline radius\n         * @type {Number}\n         * @default flylineRadius = 100\n         */\n        flylineRadius: 100,\n        /**\n         * @description Flyline animation duration\n         * @type {Array<Number>}\n         * @default duration = [20, 30]\n         */\n        duration: [20, 30],\n        /**\n         * @description Relative points position\n         * @type {Boolean}\n         * @default relative = true\n         */\n        relative: true,\n        /**\n         * @description Back ground image url\n         * @type {String}\n         * @default bgImgUrl = ''\n         * @example bgImgUrl = './img/bg.jpg'\n         */\n        bgImgUrl: '',\n        /**\n         * @description Text configuration\n         * @type {Object}\n         */\n        text: {\n          /**\n           * @description Text offset\n           * @type {Array<Number>}\n           * @default offset = [0, 15]\n           */\n          offset: [0, 15],\n          /**\n           * @description Text color\n           * @type {String}\n           * @default color = '#ffdb5c'\n           */\n          color: '#ffdb5c',\n          /**\n           * @description Text font size\n           * @type {Number}\n           * @default fontSize = 12\n           */\n          fontSize: 12\n        },\n        /**\n         * @description Halo configuration\n         * @type {Object}\n         */\n        halo: {\n          /**\n           * @description Weather to show halo\n           * @type {Boolean}\n           * @default show = true\n           * @example show = true | false\n           */\n          show: true,\n          /**\n           * @description Halo animation duration (10 = 1s)\n           * @type {Number}\n           * @default duration = 30\n           */\n          duration: 30,\n          /**\n           * @description Halo color\n           * @type {String}\n           * @default color = '#fb7293'\n           */\n          color: '#fb7293',\n          /**\n           * @description Halo max radius\n           * @type {Number}\n           * @default radius = 120\n           */\n          radius: 120\n        },\n        /**\n         * @description Center point img configuration\n         * @type {Object}\n         */\n        centerPointImg: {\n          /**\n           * @description Center point img width\n           * @type {Number}\n           * @default width = 40\n           */\n          width: 40,\n          /**\n           * @description Center point img height\n           * @type {Number}\n           * @default height = 40\n           */\n          height: 40,\n          /**\n           * @description Center point img url\n           * @type {String}\n           * @default url = ''\n           */\n          url: ''\n        },\n        /**\n         * @description Points img configuration\n         * @type {Object}\n         * @default radius = 120\n         */\n        pointsImg: {\n          /**\n           * @description Points img width\n           * @type {Number}\n           * @default width = 15\n           */\n          width: 15,\n          /**\n           * @description Points img height\n           * @type {Number}\n           * @default height = 15\n           */\n          height: 15,\n          /**\n           * @description Points img url\n           * @type {String}\n           * @default url = ''\n           */\n          url: ''\n        }\n      },\n\n      mergedConfig: null,\n\n      paths: [],\n      lengths: [],\n      times: [],\n      texts: []\n    }\n  },\n  watch: {\n    config () {\n      const { calcData } = this\n\n      calcData()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcData } = this\n\n      calcData()\n    },\n    onResize () {\n      const { calcData } = this\n\n      calcData()\n    },\n    async calcData () {\n      const { mergeConfig, createFlylinePaths, calcLineLengths } = this\n\n      mergeConfig()\n\n      createFlylinePaths()\n\n      await calcLineLengths()\n\n      const { calcTimes, calcTexts } = this\n\n      calcTimes()\n\n      calcTexts()\n    },\n    mergeConfig () {\n      let { config, defaultConfig } = this\n\n      const mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n\n      const { points } = mergedConfig\n\n      mergedConfig.points = points.map(item => {\n        if (item instanceof Array) {\n          return { position: item, text: '' }\n        }\n\n        return item\n      })\n\n      this.mergedConfig = mergedConfig\n    },\n    createFlylinePaths () {\n      const { getPath, mergedConfig, width, height } = this\n\n      let { centerPoint, points, relative } = mergedConfig\n\n      points = points.map(({ position }) => position)\n\n      if (relative) {\n        centerPoint = [width * centerPoint[0], height * centerPoint[1]]\n        points = points.map(([x, y]) => [width * x, height * y])\n      }\n\n      this.paths = points.map(point => getPath(centerPoint, point))\n    },\n    getPath (center, point) {\n      const { getControlPoint } = this\n\n      const controlPoint = getControlPoint(center, point)\n\n      return [point, controlPoint, center]\n    },\n    getControlPoint ([sx, sy], [ex, ey]) {\n      const { getKLinePointByx, mergedConfig } = this\n\n      const { curvature, k } = mergedConfig\n\n      const [mx, my] = [(sx + ex) / 2, (sy + ey) / 2]\n\n      const distance = getPointDistance([sx, sy], [ex, ey])\n\n      const targetLength = distance / curvature\n      const disDived = targetLength / 2\n\n      let [dx, dy] = [mx, my]\n\n      do {\n        dx += disDived\n        dy = getKLinePointByx(k, [mx, my], dx)[1]\n      } while (getPointDistance([mx, my], [dx, dy]) < targetLength)\n\n      return [dx, dy]\n    },\n    getKLinePointByx (k, [lx, ly], x) {\n      const y = ly - k * lx + k * x\n\n      return [x, y]\n    },\n    async calcLineLengths () {\n      const { $nextTick, paths, $refs } = this\n\n      await $nextTick()\n\n      this.lengths = paths.map((foo, i) => $refs[`path${i}`][0].getTotalLength())\n    },\n    calcTimes () {\n      const { duration, points } = this.mergedConfig\n\n      this.times = points.map(foo => randomExtend(...duration) / 10)\n    },\n    calcTexts () {\n      const { points } = this.mergedConfig\n\n      this.texts = points.map(({ text }) => text)\n    },\n    consoleClickPos ({ offsetX, offsetY }) {\n      const { width, height, dev } = this\n\n      if (!dev) return\n\n      const relativeX = (offsetX / width).toFixed(2)\n      const relativeY = (offsetY / height).toFixed(2)\n\n      console.warn(`dv-flyline-chart DEV: \\n Click Position is [${offsetX}, ${offsetY}] \\n Relative Position is [${relativeX}, ${relativeY}]`)\n    }\n  }\n}\n</script>"],"sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/flylineChart/src"}]}